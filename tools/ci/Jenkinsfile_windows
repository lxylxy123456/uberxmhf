/*
 * The following license and copyright notice applies to all content in
 * this repository where some other license does not take precedence. In
 * particular, notices in sub-project directories and individual source
 * files take precedence over this file.
 *
 * See COPYING for more information.
 *
 * eXtensible, Modular Hypervisor Framework 64 (XMHF64)
 * Copyright (c) 2023 Eric Li
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of the copyright holder nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Extra installations: sudo apt-get install gcc-mingw-w64 zip mtools
 */

properties([
    parameters([
        string(name: 'XMHF_BRANCH', defaultValue: 'xmhf64'),
        string(name: 'BUILD_OPTS', defaultValue: '--no-x2apic fast'),
        booleanParam(name: 'TEST_I386_WIN7_I386_XMHF', defaultValue: true),
        booleanParam(name: 'TEST_I386_WIN10_I386_XMHF', defaultValue: true),
        booleanParam(name: 'TEST_I386_WIN7_AMD64_XMHF', defaultValue: true),
        booleanParam(name: 'TEST_AMD64_WIN7_AMD64_XMHF', defaultValue: true),
        booleanParam(name: 'TEST_I386_WIN81_AMD64_XMHF', defaultValue: true),
        booleanParam(name: 'TEST_I386_WIN10_AMD64_XMHF', defaultValue: true),
        booleanParam(name: 'TEST_AMD64_WIN10_AMD64_XMHF', defaultValue: true)
    ])
])

void pal_demo() {
    sh "rm -rf pal_demo_tmp"
    sh "mkdir pal_demo_tmp"
    sh "./tools/ci/build_pal_demo.sh all"
    sh "tools/ci/pal_demo_img.sh pal_demo_tmp/pal_demo.img"
}

void qemu_test(String subarch, String guest_subarch, String qemu_image,
                String timeout, String memory) {
    PWD = sh(returnStdout: true, script: 'pwd').trim()
    // sh "./tools/ci/download.sh cache ${qemu_image}"
    sh "cp ${PWD}/tmp/xmhf.img ${PWD}/tmp/grub/c.img"
    sh "cp pal_demo_tmp/pal_demo.img tmp/pal_demo.img"
    sh """
        qemu-img create -f qcow2 -b ${PWD}/cache/${qemu_image} \
            -F qcow2 tmp/windows.qcow2
    """
    retry (3) {
        sh """
            python3 -u ./tools/ci/test4.py \
                --guest-subarch ${guest_subarch} \
                --qemu-image tmp/windows.qcow2 \
                --work-dir ${PWD}/tmp/ \
                --qemu-timeout ${timeout} \
                --memory ${memory} \
                --no-display \
                --verbose \
                --watch-serial
        """
    }
}

def helper

pipeline {
    agent any

    stages {
        stage('Logistics') {
            steps {
                sh "git fetch origin ${params.XMHF_BRANCH}"
                sh "git checkout ${params.XMHF_BRANCH}"
                sh "git pull origin ${params.XMHF_BRANCH}"
                script {
                    cmt = sh(
                        returnStdout: true,
                        script: 'git rev-parse HEAD | head -c 9').trim()
                    currentBuild.displayName += " ${params.XMHF_BRANCH}"
                    currentBuild.displayName += " ${cmt}"
                    helper = load "tools/ci/jenkins.groovy"
                }
            }
        }
        stage('Build i386 XMHF') {
            steps {
                script {
                    helper.build_xmhf("i386", "tmp", "${params.BUILD_OPTS}")
                }
                sh "cp ${PWD}/tmp/grub/c.img ${PWD}/tmp/xmhf.img"
                pal_demo()
            }
        }
        stage('Test i386 Windows 7 on i386 XMHF') {
            when {
                expression { params.TEST_I386_WIN7_I386_XMHF }
            }
            steps {
                qemu_test "i386", "i386", "win7x86-j.qcow2", "60", "1024M"
            }
        }
        stage('Test i386 Windows 10 on i386 XMHF') {
            when {
                expression { params.TEST_I386_WIN10_I386_XMHF }
            }
            steps {
                qemu_test "i386", "i386", "win10x86-j.qcow2", "120", "1024M"
            }
        }
        stage('Build amd64 XMHF') {
            steps {
                script {
                    helper.build_xmhf("amd64", "tmp", "${params.BUILD_OPTS}")
                }
                sh "cp ${PWD}/tmp/grub/c.img ${PWD}/tmp/xmhf.img"
            }
        }
        stage('Test i386 Windows 7 on amd64 XMHF') {
            when {
                expression { params.TEST_I386_WIN7_AMD64_XMHF }
            }
            steps {
                qemu_test "amd64", "i386", "win7x86-j.qcow2", "60", "1024M"
            }
        }
        stage('Test amd64 Windows 7 on amd64 XMHF') {
            when {
                expression { params.TEST_AMD64_WIN7_AMD64_XMHF }
            }
            steps {
                qemu_test "amd64", "amd64", "win7x64-j.qcow2", "120", "1024M"
            }
        }
        stage('Test amd64 Windows 8.1 on amd64 XMHF') {
            when {
                expression { params.TEST_I386_WIN81_AMD64_XMHF }
            }
            steps {
                qemu_test "amd64", "amd64", "win81x64-j.qcow2", "200", "1024M"
            }
        }
        stage('Test i386 Windows 10 on amd64 XMHF') {
            when {
                expression { params.TEST_I386_WIN10_AMD64_XMHF }
            }
            steps {
                qemu_test "amd64", "i386", "win10x86-j.qcow2", "120", "1024M"
            }
        }
        stage('Test amd64 Windows 10 on amd64 XMHF') {
            when {
                expression { params.TEST_AMD64_WIN10_AMD64_XMHF }
            }
            steps {
                qemu_test "amd64", "amd64", "win10x64-j.qcow2", "600", "1024M"
            }
        }
    }
}

