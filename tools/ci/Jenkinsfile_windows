/*
 * Extra installations: sudo apt-get install gcc-mingw-w64 zip mtools
 */

properties([
    parameters([
        //string(name: 'XMHF_BRANCH', defaultValue: 'xmhf64', description: ''),
        string(name: 'XMHF_BRANCH', defaultValue: 'xmhf64-dev', description: ''),	// TODO
        string(name: 'BUILD_OPTS', defaultValue: '--no-x2apic', description: '')
    ])
])

void pal_demo() {
    sh "./tools/ci/build_pal_demo.sh all"
}

void qemu_test(String subarch, String guest_subarch, String qemu_image) {
    PWD = sh(returnStdout: true, script: 'pwd').trim()
    // sh "./tools/ci/download.sh cache ${qemu_image}"
    sh "rm -rf tmp"
    sh "mkdir tmp"
    sh """
        python3 -u ./tools/ci/grub.py \
            --subarch ${subarch} \
            --xmhf-bin ${PWD}/ \
            --work-dir ${PWD}/tmp/ \
            --verbose \
            --boot-dir ${PWD}/tools/ci/boot
    """
    sh "tools/ci/pal_demo_img.sh tmp/pal_demo.img"
    sh """
        python3 -u ./tools/ci/test4.py \
            --guest-subarch ${guest_subarch} \
            --qemu-image ${PWD}/cache/${qemu_image} \
            --work-dir ${PWD}/tmp/ \
            --no-display \
            --verbose \
            --watch-serial
    """
}

pipeline {
    agent any

    stages {
        stage('Logistics') {
            steps {
                sh "git fetch origin ${params.XMHF_BRANCH}"
                sh "git checkout ${params.XMHF_BRANCH}"
                sh "git pull origin ${params.XMHF_BRANCH}"
                script {
                    cmt = sh(
                        returnStdout: true,
                        script: 'git rev-parse HEAD | head -c 9').trim()
                    currentBuild.displayName += " ${params.XMHF_BRANCH}"
                    currentBuild.displayName += " ${cmt}"
                }
            }
        }
        stage('Build i386') {
            steps {
                sh "git clean -Xdf"
                // Workaround git 2.30 bug
                sh "rm -rf _build_lib* hypapps/trustvisor/src/objects/"
                sh "./tools/ci/build.sh i386 ${params.BUILD_OPTS}"
                pal_demo()
            }
        }
        /*
        stage('Test i386 Windows 7 on i386 XMHF') {
            steps {
                qemu_test "i386", "i386", "win7x86-j.qcow2"
            }
        }
        stage('Test i386 Windows 10 on i386 XMHF') {
            steps {
                qemu_test "i386", "i386", "win10x86-j.qcow2"
            }
        }
        */
        stage('Build amd64') {
            steps {
                sh "git clean -Xdf"
                // Workaround git 2.30 bug
                sh "rm -rf _build_lib* hypapps/trustvisor/src/objects/"
                sh "./tools/ci/build.sh amd64 ${params.BUILD_OPTS}"
                pal_demo()
            }
        }
        /*
        stage('Test i386 Windows 7 on amd64 XMHF') {
            steps {
                qemu_test "amd64", "i386", "win7x86-j.qcow2"
            }
        }
        stage('Test amd64 Windows 7 on amd64 XMHF') {
            steps {
                qemu_test "amd64", "amd64", "win7x64-j.qcow2"
            }
        }
        stage('Test i386 Windows 10 on amd64 XMHF') {
            steps {
                qemu_test "amd64", "i386", "win10x86-j.qcow2"
            }
        }
        */
        stage('Test amd64 Windows 10 on amd64 XMHF') {
            steps {
                qemu_test "amd64", "amd64", "win10x64-j.qcow2"
            }
        }
    }
}

