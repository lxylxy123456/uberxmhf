/*
 * The following license and copyright notice applies to all content in
 * this repository where some other license does not take precedence. In
 * particular, notices in sub-project directories and individual source
 * files take precedence over this file.
 *
 * See COPYING for more information.
 *
 * eXtensible, Modular Hypervisor Framework 64 (XMHF64)
 * Copyright (c) 2023 Eric Li
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of the copyright holder nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Files and directories in build environment
 * * ./: PWD, contains XMHF64 source
 * * ./.git: Git directory, not used directly by Jenkins
 * * ./cache/: cache QEMU images
 * * ./qemu/: QEMU work directory
 * * ./tmp/: temporary directory for testing script
 * * ./tools/ci/build.sh: script to build XMHF in one line
 * * ./tools/ci/Jenkinsfile: this file
 * * ./tools/ci/test3.py: test script
 * * ./tools/ci/grub.py: script to generate a minimal GRUB image
 * * ./tools/ci/boot: files to construct a minimal GRUB
 * * ./tools/ci/download.sh: download QEMU images from Google Drive
 */

properties([
    parameters([
        string(name: 'XMHF_BRANCH', defaultValue: 'xmhf64'),
        string(name: 'BUILD_OPTS', defaultValue: '--no-x2apic fast')
    ])
])

void qemu_test(String subarch, String qemu_image, String qemu_image_back) {
    PWD = sh(returnStdout: true, script: 'pwd').trim()
    sh "./tools/ci/download.sh cache ${qemu_image_back}"
    sh "rm -rf qemu"
    sh "mkdir qemu"
    sh "ln -s ${PWD}/cache/${qemu_image_back} qemu"
    sh """
        qemu-img create -f qcow2 -b ${PWD}/qemu/${qemu_image_back} \
                        -F qcow2 ${PWD}/qemu/${qemu_image}
    """
    sh "cp ${PWD}/tmp/grub/c.img ${PWD}/tmp/xmhf.img"
    sh """
        python3 -u ./tools/ci/test3.py \
            --subarch ${subarch} \
            --xmhf-img ${PWD}/tmp/xmhf.img \
            --debian-img ${PWD}/qemu/${qemu_image} \
            --work-dir ${PWD}/tmp/ \
            --no-display \
            --sshpass jkl \
            --verbose \
            --watch-serial
    """
}

def helper

pipeline {
    agent any

    stages {
        stage('Logistics') {
            steps {
                sh "git fetch origin ${params.XMHF_BRANCH}"
                sh "git checkout ${params.XMHF_BRANCH}"
                sh "git pull origin ${params.XMHF_BRANCH}"
                script {
                    cmt = sh(
                        returnStdout: true,
                        script: 'git rev-parse HEAD | head -c 9').trim()
                    currentBuild.displayName += " ${params.XMHF_BRANCH}"
                    currentBuild.displayName += " ${cmt}"
                    helper = load "tools/ci/jenkins.groovy"
                }
            }
        }
        stage('Build i386 XMHF') {
            steps {
                script {
                    helper.build_xmhf("i386", "tmp", "${params.BUILD_OPTS}")
                }
            }
        }
        stage('Test i386 Debian in i386 XMHF') {
            steps {
                qemu_test "i386", "debian11x86-j.qcow2", "debian11x86.qcow2"
            }
        }
        stage('Build amd64 XMHF') {
            steps {
                script {
                    helper.build_xmhf("amd64", "tmp", "${params.BUILD_OPTS}")
                }
            }
        }
        stage('Test i386 Debian in amd64 XMHF') {
            steps {
                qemu_test "i386", "debian11x86-j.qcow2", "debian11x86.qcow2"
            }
        }
        stage('Test amd64 Debian in amd64 XMHF') {
            steps {
                qemu_test "amd64", "debian11x64-j.qcow2", "debian11x64.qcow2"
            }
        }
    }
}

