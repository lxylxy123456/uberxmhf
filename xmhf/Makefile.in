# Rootest Makefile for XMHF and an App
# Builds a bunch of subdirectories here, and then builds the app

EMHF_TOPDIR := $(dir $(lastword $(MAKEFILE_LIST)))
EMHF_ABSTOPDIR := $(realpath $(EMHF_TOPDIR))

# define XMHF root directory and XMHF core include directory for
# apps
export EMHF_INCLUDE := $(EMHF_ABSTOPDIR)/xmhf/src/xmhf-core/include

# define CMOCK and UNITY for app unit test support
export CMOCKDIR := @CMOCKDIR@
export UNITYDIR := @UNITYDIR@

# Options that aspire to be automatically controlled, but are currently
# basically required and everything breaks without them. FIXME!
export TARGET_HWPLATFORM := x86
export NESTED_PAGING := y

#where you want loader and runtime binaries to go
export HYPOUTDIR = $(CURDIR)

# libtommath
export LIBTOMMATH_SRC := $(realpath @LIBTOMMATH_SRC@)
LIBTOMMATH_BUILD = $(CURDIR)/_build_libtommath
LIBTOMMATH_ARCHIVE = libtommath.a

# libtomcrypt
export LIBTOMCRYPT_SRC := $(realpath @LIBTOMCRYPT_SRC@)
LIBTOMCRYPT_BUILD = $(CURDIR)/_build_libtomcrypt
LIBTOMCRYPT_ARCHIVE = libtomcrypt.a

# libbaremetal "source" location, currently hard-coded
# TODO: specify via configure
# LIBBAREMETAL_SRC = $(CURDIR)/libbaremetal
export LIBBAREMETAL_SRC := $(realpath @LIBBAREMETAL_SRC@)

# libbaremetal archive
# TODO: specify via configure
LIBBAREMETAL_ARCHIVE = libbaremetal.a

# libbaremetal includes
LIBBAREMETAL_SUBLIBS = $(wildcard $(LIBBAREMETAL_SRC)/lib*)
LIBBAREMETAL_INC = $(foreach dir,$(LIBBAREMETAL_SUBLIBS),-I$(dir)/include)

# libbaremetal build directory 
LIBBAREMETAL_BUILD = $(CURDIR)/_build_libbaremetal

export ADDL_LIBS :=
export ADDL_INCLUDES :=

# App's source tree root (
export APP_ROOT := $(realpath @APP_ROOT@)

# The APP_ARCHIVE is what MUST contain ALL of the App's binary code
# 'make install-dev' is handled indepdendently
export builddir=@builddir@

export APP_ARCHIVE := $(APP_ROOT)/xmhfhypapp.a

ADDL_LIBS += $(LIBBAREMETAL_BUILD)/_objects/$(LIBBAREMETAL_ARCHIVE)
ADDL_INCLUDES += -I$(EMHF_INCLUDE) $(LIBBAREMETAL_INC)

ADDL_LIBS += $(LIBTOMCRYPT_BUILD)/$(LIBTOMCRYPT_ARCHIVE)
ADDL_INCLUDES += -I$(LIBTOMCRYPT_SRC)/src/headers/

ADDL_LIBS += $(LIBTOMMATH_BUILD)/$(LIBTOMMATH_ARCHIVE)
ADDL_INCLUDES += -I$(LIBTOMMATH_SRC)

# link libbaremetal *again* to resolve more dependencies
ADDL_LIBS += $(LIBBAREMETAL_BUILD)/_objects/$(LIBBAREMETAL_ARCHIVE)

##################################################################################
### BEGIN Variables controlled using autoconf
##################################################################################
# Build-time configuration options; our project IS UNIQUE in this aspect
# For an explanation of these options, see configure.ac or run:
# ./configure --help
export MP_VERSION := @MP_VERSION@
export DEBUG_SERIAL := @DEBUG_SERIAL@
export DEBUG_SERIAL_PORT := @DEBUG_SERIAL_PORT@
export DEBUG_VGA := @DEBUG_VGA@
export DRT := @DRT@
export DMAP := @DMAP@
export XMHF_TARGET_PLATFORM := @TARGET_PLATFORM@
export XMHF_TARGET_ARCH := @TARGET_ARCH@

# Path settings; our project is not unique in this aspect
export prefix=@prefix@
export exec_prefix=@exec_prefix@
export libdir=@libdir@
export includedir=@includedir@
export pkgconfigdir=@pkgconfigdir@
export pkgincludedir=@pkgincludedir@

# Tool settings; our project is not unique in this aspect
export CC = @CC@
export AS = @AS@
export LD = @LD@
export OBJDUMP = @OBJDUMP@
export OBJCOPY = @OBJCOPY@
export STRIP = @STRIP@
export RM = @RM@
export CP = @CP@
export TAR = @TAR@
export SED = @SED@
export MKDIR = @MKDIR@
export CAT = @CAT@

export CCLIB = @CCLIB@

# FIXME- this should be configurable
# export CFLAGS=-m32

##CFLAGS and ASFLAGS population
# experimental support
export INIT_LATE := n
export E820_UG_TEST := n
export TEST_CPU_QUIESCE := n

# relatively stable support
# TODO: FIXME: Build breaks with some combinations of these options.
# They aren't really "options" anymore
# TODO: Control these with autoconf
export NESTED_PAGING := y


#-----build configuration

#----- build information (version)
export XMHF_BUILD_VERSION := $(shell git describe --abbrev=0)

#----- build information (revision)
export XMHF_BUILD_REVISION_BRANCH := 
export XMHF_BUILD_REVISION_COMMIT := 
export XMHF_BUILD_REVISION := v6.1.0-you-gotta-have-faith-not-in-who-you-are-but-who-you-can-be

#-----basic flags for compiling and assembling
CFLAGS = -fno-builtin -fno-common -fno-strict-aliasing -iwithprefix include
CFLAGS += -fno-stack-protector
CFLAGS += -Wstrict-prototypes -Wdeclaration-after-statement 
CFLAGS += -Wno-pointer-arith -Wextra -Wfloat-equal 
CFLAGS += -Werror
CFLAGS += -Wsign-compare
CFLAGS += -Wno-bad-function-cast -Wall
CFLAGS += -Waggregate-return
CFLAGS += -Winline
CFLAGS += -m32 -march=k8 
CFLAGS += -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3 
CFLAGS += -mno-sse4.1 -mno-sse4.2 -mno-sse4 -mno-avx -mno-aes 
CFLAGS += -mno-pclmul -mno-sse4a -mno-sse5 -mno-3dnow -mno-popcnt -mno-abm
CFLAGS += -nostdinc -pipe

CFLAGS += $(ADDL_INCLUDES)
VFLAGS = $(ADDL_INCLUDES)


#-----generate compiler/assembler defines from configuration options selected
CFLAGS += -D___XMHF_BUILD_VERSION___=\"$(XMHF_BUILD_VERSION)\"
VFLAGS += -D___XMHF_BUILD_VERSION___=\"$(XMHF_BUILD_VERSION)\"

CFLAGS += -D___XMHF_BUILD_REVISION___=\"$(XMHF_BUILD_REVISION)\"
VFLAGS += -D___XMHF_BUILD_REVISION___=\"$(XMHF_BUILD_REVISION)\"

ifeq ($(XMHF_TARGET_ARCH), x86-svm)
	VFLAGS += -D__XMHF_TARGET_ARCH_X86_SVM__
endif
ifeq ($(XMHF_TARGET_ARCH), x86-vmx)
	VFLAGS += -D__XMHF_TARGET_ARCH_X86_VMX__
endif

ifeq ($(NESTED_PAGING), y)
	CFLAGS += -D__NESTED_PAGING__
	VFLAGS += -D__NESTED_PAGING__
endif
ifeq ($(DEBUG_SERIAL), y)
	CFLAGS += -D__DEBUG_SERIAL__
	VFLAGS += -D__DEBUG_SERIAL__
	CFLAGS += -DDEBUG_PORT=$(DEBUG_SERIAL_PORT)
	VFLAGS += -DDEBUG_PORT=$(DEBUG_SERIAL_PORT)
endif
ifeq ($(DEBUG_VGA), y)
	CFLAGS += -D__DEBUG_VGA__
	VFLAGS += -D__DEBUG_VGA__
endif
ifeq ($(MP_VERSION), y)
	CFLAGS += -D__MP_VERSION__
	VFLAGS += -D__MP_VERSION__
endif
ifeq ($(DRT), y)
	CFLAGS += -D__DRT__
	VFLAGS += -D__DRT__
endif
ifeq ($(DMAP), y)
	CFLAGS += -D__DMAP__
	VFLAGS += -D__DMAP__
endif



CFLAGS += -D__DO_SENTER__
VFLAGS += -D__DO_SENTER__

ifeq ($(E820_UG_TEST), y)
	CFLAGS += -D__E820_UG_TEST__
	VFLAGS += -D__E820_UG_TEST__
endif
ifeq ($(TEST_CPU_QUIESCE), y)
	CFLAGS += -D__TEST_CPU_QUIESCE__
	VFLAGS += -D__TEST_CPU_QUIESCE__
endif
	# late initialization support (experimental)
ifeq ($(INIT_LATE), y)
	CFLAGS += -D__INIT_LATE__ 
	VFLAGS += -D__INIT_LATE__ 
	CFLAGS += -DPERF_CRIT
	VFLAGS += -DPERF_CRIT
endif

#-----export CFLAGS and ASFLAGS
ASFLAGS = $(CFLAGS) -D__ASSEMBLY__

export CFLAGS
export ASFLAGS
export VFLAGS

.PHONY: all
all: $(APP_ARCHIVE) subdirs 

.PHONY: $(APP_ARCHIVE)
$(APP_ARCHIVE):
	@echo ---------------------------------------------------------------
	@echo Building primary hyperapp...
	@echo ---------------------------------------------------------------
	[ -f $(APP_ROOT)/autogen.sh ] && (cd ${APP_ROOT} && ./autogen.sh) || echo No $(APP_ROOT)/autogen.sh, skipping...
	[ -f $(APP_ROOT)/configure ] && (cd ${APP_ROOT} && ./configure) || echo No $(APP_ROOT)/configure, skipping...
	cd $(APP_ROOT) && $(MAKE) -w all
	@echo ---------------------------------------------------------------
	@echo primary hyperapp build SUCCESS
	@echo ---------------------------------------------------------------

.PHONY: subdirs
subdirs: $(LIBBAREMETAL_SRC) 
	@echo ---------------------------------------------------------------
	@echo Building libtommath...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBTOMMATH_BUILD)
	cd $(LIBTOMMATH_BUILD) && $(MAKE) -f $(LIBTOMMATH_SRC)/makefile CFLAGS="$(filter-out -Werror,$(CFLAGS))" -w libtommath.a
	@echo ---------------------------------------------------------------
	@echo libtommath.a build SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Building libtomcrypt...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBTOMCRYPT_BUILD)
	cd $(LIBTOMCRYPT_BUILD) && $(MAKE) -f $(LIBTOMCRYPT_SRC)/makefile CFLAGS="$(filter-out -Werror,$(CFLAGS)) -DLTC_SOURCE" -w libtomcrypt.a
	@echo ---------------------------------------------------------------
	@echo libtomcrypt.a build SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Building libbaremetal...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBBAREMETAL_BUILD)
	cd $(LIBBAREMETAL_BUILD) && $(MAKE) -f $(LIBBAREMETAL_SRC)/Makefile -w all
	@echo ---------------------------------------------------------------
	@echo libbaremetal.a build SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Building XMHF core/hyperapp...
	@echo ---------------------------------------------------------------
	cd xmhf/src/xmhf-core && $(MAKE) -w all
	@echo ---------------------------------------------------------------
	@echo XMHF core/hyperapp build SUCCESS
	@echo ---------------------------------------------------------------

.PHONY: install
install: install-bin

.PHONY: install-bin
install-bin:
	# Install the _actual_ final product
	install -d $(DESTDIR)/boot
	install --mode=644 $(HYPOUTDIR)/hypervisor-$(TARGET_HWPLATFORM).bin.gz $(DESTDIR)/boot
	install --mode=644 $(HYPOUTDIR)/init-$(TARGET_HWPLATFORM).bin $(DESTDIR)/boot

.PHONY: install-dev
install-dev:
	cd $(APP_ROOT) && $(MAKE) -w install-dev
	@for i in $(SUBDIRS) ;\
	do \
		(cd $$i && echo "making install-dev in $$i..." && $(MAKE) -w install-dev) || exit 1; \
	done;

# Currently the only tests we have are in the TrustVisor tree
.PHONY: test
test:
	cd $(APP_ROOT) && $(MAKE) -w test

#.PHONY: clean distclean init-late-clean
.PHONY: clean distclean 
clean:
	@echo ---------------------------------------------------------------
	@echo Cleaning primary hyperapp...
	@echo ---------------------------------------------------------------
	cd $(APP_ROOT) && $(MAKE) -w clean
	@echo ---------------------------------------------------------------
	@echo primary hyperapp clean SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Cleaning libbaremetal...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBBAREMETAL_BUILD)
	cd $(LIBBAREMETAL_BUILD) && $(MAKE) -f $(LIBBAREMETAL_SRC)/Makefile -w clean
	rm -rf $(LIBBAREMETAL_BUILD)
	@echo ---------------------------------------------------------------
	@echo libbaremetal.a clean SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Cleaning libtommath and libtomcrypt...
	@echo ---------------------------------------------------------------
	rm -rf $(LIBTOMMATH_BUILD)
	rm -rf $(LIBTOMCRYPT_BUILD)
	@echo ---------------------------------------------------------------
	@echo libtommath and libtomcrypt clean SUCCESS...
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Cleaning XMHF core/hyperapp...
	@echo ---------------------------------------------------------------
	cd xmhf/src/xmhf-core && $(MAKE) -w clean
	@echo ---------------------------------------------------------------
	@echo XMHF core/hyperapp cleanup SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Cleaning auto-generated docs...
	@echo ---------------------------------------------------------------
	rm -rf *.html
	rm -rf doc
	@echo ---------------------------------------------------------------
	@echo auto-generated docs cleanup SUCCESS
	@echo ---------------------------------------------------------------

distclean: clean
	$(RM) config.log config.status
	# http://www.gnu.org/software/automake/manual/automake.html#Clean
	$(RM) -rf Makefile
	cd $(APP_ROOT) && $(MAKE) -w distclean


verify:
	cd xmhf/src/xmhf-core && make -w verify

verifyinit:
	cd xmhf/src/xmhf-core && make -w verifyinit
	
verifyall: 
	cd xmhf/src/xmhf-core && make -w verifyall

.PHONY: htmldoc
htmldoc:
	tools/docgen/render-doc.sh


#-----autoconf rules
Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

configure: configure.ac
	./autogen.sh

